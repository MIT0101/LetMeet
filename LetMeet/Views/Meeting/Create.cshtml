@inject AppTimeProvider _appTimeProvider;
@inject IHttpContextAccessor _httpContextAccessor;

@{
    ViewData["Title"] = "Create Meeting";
    ViewBag.currentPage = "Meetings";


    StudentSelectDto? satudentSummary = ViewData[ViewStringHelper.StudentSummary] as StudentSelectDto;

    Dictionary<int, ISet<int>>? daysFreeHours = ViewData[ViewStringHelper.MutualFreeDays] as Dictionary<int, ISet<int>>;


    Guid supervisorId = Guid.Empty;
    Guid studentId = Guid.Empty;

    try
    {
        supervisorId = Guid.Parse(_httpContextAccessor.HttpContext?.User.FindFirstValue(ClaimsNameHelper.UserInfoId));
        studentId = Guid.Parse(_httpContextAccessor.HttpContext?.Request.Query["studentId"].ToString());
    }
    catch (Exception ex)
    {

    }

}

@*create form to fill MeetingDto info*@

<div class="container mt-5">
    <div class="card">
        <div class="card-header card-header-primary">
            <h4 class="card-title">Create Meeting With : <strong>@satudentSummary?.FullName</strong></h4>
        </div>
        <div class="card-body">
            <form id="meeting-form" method="post" action="/Meeting/api/Create?studentId=@studentId">
                <!-- Supervisor ID -->
                <div class="form-group">
                    <input hidden value="@supervisorId"
                           type="text" class="form-control" id="supervisorId" name="supervisorId" required>

                </div>

                <!-- Student ID -->
                <div class="form-group">
                    <input value="@studentId" hidden type="text" class="form-control" id="studentId" name="studentId" required>

                </div>

                <table style="border-collapse: separate;border-spacing: 10px 5px;" class="text-start w-100">

                    <!-- Day -->

                    <tr>
                        <td>
                            <label for="day">Select Day</label>

                        </td>
                        <td>
                            <select class="selectpicker btn btn-outline-rose btn-dark w-100" id="day" name="day"
                                    data-val="true" data-val-required="Day Is Required" required>
                                <!-- Days will be populated by JavaScript -->
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="day" data-valmsg-replace="true"></span>
                        </td>


                    </tr>

                    <!-- Start Hour -->

                    <tr>
                        <td>
                            <label for="startHour">Start Hour</label>
                        </td>
                        <td>
                            <select class="selectpicker btn btn-outline-rose btn-dark w-100" id="startHour" name="startHour"
                                    data-val="true" data-val-required="Start Hour Is Required" required>
                                <!-- Start hours will be populated by JavaScript -->
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="startHour" data-valmsg-replace="true"></span>
                        </td>
                    </tr>

                    <!-- End Hour -->

                    <tr>
                        <td>
                            <label for="endHour">End Hour</label>
                        </td>
                        <td>
                            <select class="selectpicker btn btn-outline-rose btn-dark w-100" id="endHour" name="endHour"
                                    data-val="true" data-val-required="End Hour Is Required" required>
                                <!-- End hours will be populated by JavaScript -->
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="endHour" data-valmsg-replace="true"></span>
                        </td>
                    </tr>

                    <!-- Date -->

                    <tr>
                        <td>
                            <label for="date">Date</label>
                        </td>
                        <td>
                            <input min="@_appTimeProvider.Now" type="date" class="form-control" id="date" name="date"
                                   data-val="true" data-val-required="Date Is Required" required data-rule-day="2">
                            <span class="text-danger field-validation-valid" data-valmsg-for="date" data-valmsg-replace="true"></span>
                        </td>
                    </tr>


                </table>

                <div class="form-group">
                </div>

                <!-- Description -->
                <div class="form-group">
                    <label for="description">Meeting Description</label>
                    <textarea class="form-control" id="description" name="description" minlength="4" maxlength="500"
                              data-val="true" data-val-length="Meeting description must be between 4 and 500 characters"
                              data-val-length-max="500" data-val-length-min="4"></textarea>
                    <span class="text-danger field-validation-valid" data-valmsg-for="description" data-valmsg-replace="true"></span>

                    <!-- Show or hide add meeting task -->
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" type="checkbox" id="hasTasks" name="hasTasks">
                            <span class="form-check-sign">
                                <span class="check"></span>
                            </span>
                            Add Meeting Tasks
                        </label>
                    </div>
                    <!-- Meeting tasks -->

                    <div id="meeting-tasks" style="display:none;">
                        <h5>Meeting Tasks</h5>

                        <button type="button" class="btn btn-primary pull-right" id="add-task" style="display:none;">Add Task</button>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="tasks-table-body">
                            </tbody>
                        </table>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary">Create Meeting</button>
            </form>
        </div>
    </div>
</div>

<!-- Meeting Task Modal -->
<div class="modal fade" id="meetingTaskModal" tabindex="-1" role="dialog" aria-labelledby="meetingTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="meetingTaskModalLabel">Add Meeting Task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="add-task-form" href="">
                    <div class="form-group">
                        <label for="task-title">Title</label>
                        <input type="text" class="form-control" name="task-title" id="task-title" required minlength="4" maxlength="500"
                               data-val="true" data-val-required="Title Is Required" data-val-length="Title must be between 4 and 500 characters"
                               data-val-length-max="500" data-val-length-min="4">
                        <span class="text-danger field-validation-valid" data-valmsg-for="task-title" data-valmsg-replace="true"></span>

                    </div>
                    <div class="form-group">
                        <label for="task-description">Description</label>
                        <textarea class="form-control" name="task-description" id="task-description"
                                  data-val="true" data-val-required="Description Is Required" data-val-length="Description must be between 4 and 500 characters"
                                  data-val-length-max="500" data-val-length-min="4" maxlength="500" required></textarea>
                        <span class="text-danger field-validation-valid" data-valmsg-for="task-description" data-valmsg-replace="true"></span>

                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="save-task">Save Task</button>
            </div>
        </div>
    </div>
</div>
<script>

    class FreeDayJs {
        constructor(day, freeHourSet) {
            this.day = day;
            this.freeHourSet = freeHourSet;
        }
    }

    //has free days
    const freeDayHours = new Map();

    let dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

</script>
@{
    foreach (var freeday in daysFreeHours)
    {
        <script>
            var myHashSet = @Html.Raw(Json.Serialize(@freeday.Value.ToArray()));
            @*if no free hours in day we will not show the day *@
                                                                                                               if (myHashSet !== undefined && myHashSet.length !== 0) {
                freeDayHours.set(Number.parseInt('@freeday.Key'), new FreeDayJs(@freeday.Key, myHashSet));
            }

        </script>
    }
}
<!--For Rest All Meeting Tasks-->
<script defer>
    function RemoveAllTaksFromTable() {
        // Select the tasks table body element
        const tasksTableBody = document.getElementById("tasks-table-body");

        // Loop through all the child elements of the tasks table body and remove them
        while (tasksTableBody.firstChild) {
            tasksTableBody.removeChild(tasksTableBody.firstChild);
        }
    }

    function SelectFirstItem(selectElement) {
        // Get all the options of the select element
        const options = selectElement.options;

        // Loop through the options and select the first available one
        for (let i = 0; i < options.length; i++) {
            if (!options[i].disabled) {
                selectElement.selectedIndex = i;
                break;
            }
        }
        const event = new Event("change");
        selectElement.dispatchEvent(event);
    }

    function ResutAllForm() {
        RemoveAllTaksFromTable();
        //REST DAYS
        SelectFirstItem(document.getElementById('day'));
        //REST START HOUR END HOUR WILL RESU AUTOMATIC BY CHANGE EVENT FOR SATRT HOUR
        SelectFirstItem(document.getElementById('startHour'));
        //rest date
        document.getElementById('date').value = '';
        //Rest Description
        document.getElementById('description').value = '';
        //rest meeting tasks checked
        meetingTasksCheckBox = document.getElementById('hasTasks');
        meetingTasksCheckBox.checked = false;
        //target event manually
        const event = new Event("change");
        meetingTasksCheckBox.dispatchEvent(event);

    }


</script>

<!--For Handle Form Submitting-->
<script defer>
    const meetingForm2 = document.getElementById('meeting-form');
    const tasksTableBody2 = document.getElementById('tasks-table-body');



    meetingForm2.addEventListener('submit', async function (event) {
        event.preventDefault();

        if (!meetingForm2.checkValidity()) {
            //alert('Please fill in the required fields.');
            return;
        }

        const formData = new FormData(meetingForm2);
        const tasks = [];

        for (const row of tasksTableBody2.querySelectorAll('tr')) {
            const title = row.querySelector('td:nth-child(1)').textContent;
            const description = row.querySelector('td:nth-child(2)').textContent;

            tasks.push({ title, description });
        }

        const hasTasksCheckbox = meetingForm2.querySelector('input[name="hasTasks"]');

        // Log the form data
        let data = {};

        for (const [key, value] of formData.entries()) {
            //console.log(`${key}: ${value}`);
            data[key] = value;
        }
        data['hasTasks'] = hasTasksCheckbox.checked;
        data['tasks'] = tasks;

        // make submit button text loading
        const submitButton = meetingForm2.querySelector('button[type="submit"]');
        ShowLoading(submitButton);

        RemoveAlerts();

        fetch(meetingForm2.getAttribute('action'), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                if (data.isSuccess) {
                    //redirect user to /Meetings/supervisorId?studentId
                    //window.location.href = "/Meeting/@supervisorId?studentId=@studentId";
                    // show success alert above form
                    CreateAndAddAlert(`Meeting Created Successfully At ${new Date(data.data.date).toISOString().slice(0, 10)}`, false);
                    DisableLoading(submitButton);
                    ResutAllForm();
                    return;
                }
                //show error alert above form

                // create and alerts from errors in data.errors
                if (data.errors && data.errors.length > 0) {

                    for (const error of data.errors) {
                        CreateAndAddAlert(error, true);
                    }
                }
                DisableLoading(submitButton);


                //location.reload();
                // Redirect or show success message
            })
            .catch(error => {
                console.error('Error:', error);
                DisableLoading(submitButton);

                // show error alert above form
                CreateAndAddAlert("Error happen try again", true);
            });
    });
    // method used to show loading and disable submit button
    function ShowLoading(submitButton) {
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
        submitButton.disabled = true;
    }
    // function to disable loading and enable submit button
    function DisableLoading(submitButton) {
        submitButton.innerHTML = 'Create Meeting';
        submitButton.disabled = false;
    }

    // used to create alert and add it to the form
    function CreateAndAddAlert(message, isError) {
        const alert = document.createElement('div');
        let alertClass = "alert-success";

        if (isError) {
            alertClass = "alert-danger";
        }

        alert.classList.add('alert', alertClass, 'alert-dismissible', 'fade', 'show');
        alert.setAttribute('role', 'alert');
        alert.innerHTML = message + '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>';
        meetingForm2.prepend(alert);
    }

    function RemoveAlerts() {
        const alerts = meetingForm2.querySelectorAll('.alert');
        for (const alert of alerts) {
            alert.remove();
        }
    }

</script>
<!-- Free day change handling script -->
<script defer>
    // Populate the days, start hour, and end hour dropdowns
    const daySelect = document.getElementById('day');
    const startHourSelect = document.getElementById('startHour');
    const endHourSelect = document.getElementById('endHour');


    //// Populate days
    for (let [key, value] of freeDayHours) {

        const option = document.createElement('option');
        option.value = key;
        option.textContent = dayOfWeek[key];
        daySelect.appendChild(option);

    }

    // Populate start and end hour drop-downs
    function populateHourDropdowns(selectedDay) {
        startHourSelect.innerHTML = '';
        endHourSelect.innerHTML = '';

        const dayHours = freeDayHours.get(Number.parseInt(selectedDay)).freeHourSet;

        for (const hour of dayHours) {
            const startOption = document.createElement('option');
            startOption.value = hour;
            startOption.textContent = hour;
            startHourSelect.appendChild(startOption);

            const endOption = document.createElement('option');
            endOption.value = hour + 1;
            endOption.textContent = hour + 1;
            endHourSelect.appendChild(endOption);
        }
    }

    daySelect.addEventListener('change', function () {
        populateHourDropdowns(this.value);
    });

    populateHourDropdowns(daySelect.value);

    // Check hous availability

    function isHoursValid() {
        const selectedDay = daySelect.value;
        const startHour = parseInt(startHourSelect.value);
        const endHour = parseInt(endHourSelect.value);
        return freeDayHours.get(parseInt(selectedDay)).freeHourSet.includes(startHour) && freeDayHours.get(parseInt(selectedDay)).freeHourSet.includes(endHour - 1);
    }

    //for make end hour show only values with higher than startHour
    startHourSelect.addEventListener('change', function () {
        let startHourValue = parseInt(startHourSelect.value);

        // Disable all the options of the end hour select
        for (let i = 0; i < endHourSelect.options.length; i++) {
            endHourSelect.options[i].disabled = true;
        }

        // Enable the options that have a value higher than the selected start hour value

        for (let i = 0; i < endHourSelect.options.length; i++) {
            if (parseInt(endHourSelect.options[i].value) > parseInt(startHourSelect.value)) {
                endHourSelect.options[i].disabled = false;
            }

        }

        selectFirstAvailbleInEndHour(endHourSelect.options);
    });


    function selectFirstAvailbleInEndHour(endHourOptions) {
        // Find the first available option
        let firstAvailableOptionIndex = -1;
        for (let i = 0; i < endHourOptions.length; i++) {
            if (!endHourOptions[i].disabled) {
                firstAvailableOptionIndex = i;
                break;
            }
        }

        // Set the value of the end hour select list to the value of the first available option
        if (firstAvailableOptionIndex !== -1) {
            endHourSelect.value = endHourOptions[firstAvailableOptionIndex].value;
        } else {
            endHourSelect.value = '-1';
        }
    }

    //Set the value of min date to today date value
    const meetingDatePicker = document.getElementById('date');

    var today = new Date().toISOString().split('T')[0];
    meetingDatePicker.setAttribute('min', today);

</script>



<!-- Form handling script -->
<script defer>
    document.addEventListener('DOMContentLoaded', function () {
        // Handle form submission and validation
        const meetingForm = document.getElementById('meeting-form');
        const addTaskBtn = document.getElementById('add-task');
        const meetingTasks = document.getElementById('meeting-tasks');
        const tasksTableBody = document.getElementById('tasks-table-body');
        const showHideTasksCheckbox = document.getElementById('hasTasks');

        // Show or hide add meeting task button and table
        showHideTasksCheckbox.addEventListener('change', function () {
            if (this.checked) {
                addTaskBtn.style.display = 'block';
                meetingTasks.style.display = 'block';
            } else {
                addTaskBtn.style.display = 'none';
                meetingTasks.style.display = 'none';
            }
        });

        // Add task button event listener
        addTaskBtn.addEventListener('click', function (event) {
            event.preventDefault();
            $('#meetingTaskModal').modal('show');
        });
        // Save task event listener
        const saveTaskBtn = document.getElementById('save-task');
        const addTaskForm = document.getElementById('add-task-form');
        saveTaskBtn.addEventListener('click', function () {
            if (!addTaskForm.checkValidity()) {
                return;
            }

            const title = document.getElementById('task-title').value;
            const description = document.getElementById('task-description').value;

            if (title && description) {
                const newRow = tasksTableBody.insertRow();
                const titleCell = newRow.insertCell(0);
                const descriptionCell = newRow.insertCell(1);
                const removeTaskCell = newRow.insertCell(2);

                const removeTaskBtn = document.createElement('button');
                removeTaskBtn.setAttribute('rel', 'tooltip');
                removeTaskBtn.setAttribute('title', '');
                removeTaskBtn.setAttribute('data-original-title', 'Remove Task');
                removeTaskBtn.setAttribute('type', 'button');
                removeTaskBtn.classList.add('btn', 'btn-danger', 'btn-link', 'btn-sm');

                // Create a new icon element
                const newIcon = document.createElement('i');
                newIcon.classList.add('material-icons');
                newIcon.textContent = 'close';

                // Add the icon element as a child of the button element
                removeTaskBtn.appendChild(newIcon);

                removeTaskBtn.addEventListener('click', function () {
                    if (confirm(`Are You Sure You Want To Remove Task With Title of ${title}`)) {
                        tasksTableBody.removeChild(newRow);
                    }
                });

                titleCell.textContent = title;
                descriptionCell.textContent = description;
                removeTaskCell.appendChild(removeTaskBtn);

                // Clear the input fields and close the modal
                document.getElementById('task-title').value = '';
                document.getElementById('task-description').value = '';
                $('#meetingTaskModal').modal('hide');
            }
        });

    });
</script>

<partial name="_ValidationScriptsPartial" />




