@inject IHttpContextAccessor _httpContextAccessor;
@inject AppTimeProvider _appTimeProvider;

@inject IOptions<AppServiceOptions> _serviceOptions;

@{
    ViewData["Title"] = "Show Meetings";
    ViewBag.currentPage = "Meetings";

    List<MeetingFullDto> meetings = ViewData[ViewStringHelper.Meetings] as List<MeetingFullDto> ?? new List<MeetingFullDto>();
}

<h1>Show All Meetings</h1>


<style>
    .equal-height-card {
        display: flex;
        flex-direction: column;
        height: 80%;
    }

        .equal-height-card .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

    .tasks-container {
        margin-top: auto;
    }

    /*meeting description truncted */
    .meeting-card p {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }

    /*meeting overlay for delete and other buttons*/
    .meet-overlay {
        position: absolute;
        /*width: fit-content;*/
        width: 100%;
        height: 0%;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: gray;
        overflow: hidden;
        transition: .3s ease;
        z-index: 100;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        /*margin:  0 auto;*/
        padding: 0 5px;
    }

    .meeting-card:hover .meet-overlay {
        height: 60px;
    }
</style>



<div class="row ">

    @foreach (var meeting in meetings)
    {
        int tasksNumber = meeting.tasks?.Count ?? 0;
        int numberOfTasksDone = meeting.tasks?.Where(t => t.isCompleted).Count() ?? 0;
        int numberOfTasksNotDone = tasksNumber - numberOfTasksDone;

        <div class="col-lg-4 col-xl-6 col-md-6 col-sm-12">
            <div class="card equal-height-card meeting-card">
                <div class="card-header card-header-primary" style="border-radius:6px;">
                    <div class="card-title d-flex justify-content-between">
                        
                     <div>
                            <h4>@meeting.supervisorName</h4>

                     </div>
                        

                        @{
                            string meetingPassedClass = string.Empty;
                            bool isNotMissingMeet = meeting.date.AddHours(meeting.endHour - meeting.startHour + _serviceOptions.Value.PaddingMeetHours) <= _appTimeProvider.Now;
                            if (!isNotMissingMeet)
                            {
                                meetingPassedClass = "badge-success";

                            }
                            else
                            {
                                meetingPassedClass = "badge-warning";

                            }
                        }

                        <span class="@meetingPassedClass rounded p-2" >@meeting.date.Humanize() </span>
                    
                    </div>

                    <div class="category">

                        <div>@meeting.date.ToString("D")</div>
                    </div>
                </div>
                <div class="card-body position-relative ">
                    <p>Student : @meeting.studentName</p>

                    @{
                        string description = string.IsNullOrWhiteSpace(meeting.description) ? "No Description" : meeting.description;
                        string noDescriptionClass = string.IsNullOrWhiteSpace(meeting.description) ? "text-danger" : "";
                    }
                    <p class="@noDescriptionClass">@description </p>
                    <div class="d-flex justify-content-between flex-wrap tasks-container">
                        <div>
                            Tasks: @tasksNumber
                        </div>

                        <div>Done: @numberOfTasksDone / @tasksNumber</div>
                        <div>Not Done: @numberOfTasksNotDone / @tasksNumber</div>
                    </div>

                    <div class="d-flex justify-content-center align-items-center meet-overlay">


                        @if (meeting.CanRun(_appTimeProvider.Now,_serviceOptions.Value.PaddingMeetHours))
                        {
                        <button id="runMeetingBtn" class="btn btn-success m-1 " rel="tooltip" title="" data-original-title="Run Meeting">
                            <i class="material-icons">not_started</i>
                        </button>
                        }
                        
                        <button id="viewMeetingBtn" rel="tooltip" title="" data-original-title="Show Meeting" class="btn btn-info m-1">
                            <i class="material-icons">visibility</i>
                        </button>
                        

                        @if (meeting.CanDelete(_appTimeProvider.Now,_serviceOptions.Value.PaddingMeetHours))
                        {
                        <!--delete meeting form must contains meet id and current userId-->
                        <form>
                            <input type="hidden" name="currentUserId" value="@_httpContextAccessor.HttpContext.User.FindFirstValue(ClaimsNameHelper.UserInfoId)" />
                            <input type="hidden" name="meetingId" value="@meeting.id" />

                            <button rel="tooltip" title="" data-original-title="Delete Meeting" type="submit" onclick="return confirm('Are you sure you want to delete this meeting ?');" class="btn btn-danger m-1">
                                <i class="material-icons">delete</i>
                            </button>

                        </form>
                        }

                    </div>
                </div>

            </div>

        </div>

    }



</div>



<script>
    let myMeetings = @Html.Raw(Json.Serialize(meetings));

    //[{
    //    "created": "2023-04-27T00:54:20.5296405",
    //    "studentName": "Ali Adel",
    //    "supervisorName": "Abass Ahmed",
    //    "id": 4,
    //    "supervisorId": "364c30ec-c44e-4afa-9d2b-08db467e2311",
    //    "day": 1,
    //    "studentId": "8b775583-83fa-4fd5-9d2c-08db467e2311",
    //    "totalTimeHoure": 1,
    //    "date": "2023-05-15T02:00:00",
    //    "startHour": 2,
    //    "endHour": 3,
    //    "description": "",
    //    "hasTasks": true,
    //    "tasks": [
    //        {
    //            "id": 2,
    //            "title": "ttiasdas",
    //            "decription": "asdihgasdas",
    //            "isCompleted": false
    //        }
    //    ]
    //}]

    let meetingsMap = new Map();
    //loop through myMeeting and add to map the key is the id and the value is the object
    myMeetings.forEach(meeting => {
        meetingsMap.set(meeting.id, meeting);
    });

</script>

<script defer>

</script>
