// <auto-generated />
using System;
using LetMeet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetMeet.Data.Migrations.MainDb
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LetMeet.Data.Entites.Meetigs.Meeting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("SupervisionInfoid")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("endHour")
                        .HasColumnType("int");

                    b.Property<bool>("isPresent")
                        .HasColumnType("bit");

                    b.Property<int>("startHour")
                        .HasColumnType("int");

                    b.Property<int>("totalTimeHoure")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("SupervisionInfoid");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.Meetigs.MeetingTask", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("Meetingid")
                        .HasColumnType("int");

                    b.Property<string>("decription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("id");

                    b.HasIndex("Meetingid");

                    b.ToTable("MeetingTasks");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.DayFree", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<Guid?>("UserInfoid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("day")
                        .HasColumnType("int");

                    b.Property<int>("endHour")
                        .HasColumnType("int");

                    b.Property<int>("startHour")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserInfoid");

                    b.ToTable("DayFrees");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.SupervisionInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("extendTimes")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("studentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("supervisorid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("studentid");

                    b.HasIndex("supervisorid");

                    b.ToTable("SupervisionInfo");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.UserInfo", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("identityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("profileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("stage")
                        .HasColumnType("int");

                    b.Property<int>("userRole")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("emailAddress")
                        .IsUnique();

                    b.HasIndex("identityId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.Meetigs.Meeting", b =>
                {
                    b.HasOne("LetMeet.Data.Entites.UsersInfo.SupervisionInfo", "SupervisionInfo")
                        .WithMany()
                        .HasForeignKey("SupervisionInfoid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SupervisionInfo");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.Meetigs.MeetingTask", b =>
                {
                    b.HasOne("LetMeet.Data.Entites.Meetigs.Meeting", null)
                        .WithMany("tasks")
                        .HasForeignKey("Meetingid")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.DayFree", b =>
                {
                    b.HasOne("LetMeet.Data.Entites.UsersInfo.UserInfo", null)
                        .WithMany("freeDays")
                        .HasForeignKey("UserInfoid")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.SupervisionInfo", b =>
                {
                    b.HasOne("LetMeet.Data.Entites.UsersInfo.UserInfo", "student")
                        .WithMany()
                        .HasForeignKey("studentid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LetMeet.Data.Entites.UsersInfo.UserInfo", "supervisor")
                        .WithMany()
                        .HasForeignKey("supervisorid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("supervisor");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.Meetigs.Meeting", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("LetMeet.Data.Entites.UsersInfo.UserInfo", b =>
                {
                    b.Navigation("freeDays");
                });
#pragma warning restore 612, 618
        }
    }
}
